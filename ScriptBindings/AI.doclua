-------------------------------------------------------------------------------
-- @module AI
-- 
-- This module is used to 

---
--@type MoveSelector
--

---
--@type PokemonSelector

---
--@type ItemSelector

---
--@type TargetSelector

---
--@callof MoveSelector
--
--@param Battle#Battle battle the active battle
--@param Pokemon#Pokemon this the pokemon
--@param Pokemon#Pokemon target the pokemon being targeted.
--@param #list<Pokemon#MoveInstance> filter the filter being applied or nil if no filter is applied.
--
--@return Pokemon#MoveInstance a move instance, which is a member of this, to be used.
--@return #nil if this selector is not interested in selecting a move
--@return #list<Pokemon#MoveInstance> if this selector is interested in filtering the results.

---
--@callof PokemonSelector
--
--@param Battle#Battle battle the active battle
--@param Pokemon#Pokemon this the pokemon
--@param Pokemon#Pokemon target the pokemon being targeted.
--@param Battle#PokemonList the pokemon list to target.
--@param #list<Pokemon#Pokemon> filter the filter being applied or nil if no filter is applied.
--
--@return Pokemon#Pokemon the pokemon to switch in.
--@return #nil if this selector is not interested in selecting a pokemon
--@return #list<Pokemon#Pokemon> if this selector is interested in filtering the results.

---
--@callof ItemSelector
--
--@param Battle#Battle battle the active battle
--@param Pokemon#Pokemon this the pokemon
--@param Pokemon#Pokemon target the pokemon being targeted.
--@param #list<Pokemon#Item> filter the filter being applied or nil if no filter is applied.
--
--@return Pokemon#Item the item to use.
--@return #nil if this selector is not interested in selecting an item
--@return #list<Pokemon#Item> if this selector is interested in filtering the results.

---
--@callof TargetSelector
--
--@param Battle#Battle battle the active battle
--@param Pokemon#Pokemon this the pokemon
--@param Battle#Side side the opponents side.
--@param #list<Pokemon#Pokemon> filter the filter being applied or nil if no filter is applied.
--
--@return Pokemon#Pokemon the pokemon being targeted. MUST be a member of the current battle.
--@return #nil if this selector is not interested in selecting a target.
--@return #list<Pokemon#Pokemon> if this selector is interested in filtering the results.

---
--@function[parent=#AI] chooseTarget
--
--Returns a target selector task
--@param self
--@param #TargetSelector selector
--@return #AITask the task

---
--@function[parent=#AI] attackWith
--
--Returns an AI Task which attacks the target pokemon with a move selected by its argument
--@param self
--@param #MoveSelector selector
--@return #AITask the task

---
--@function[parent=#AI] useItem
--
--Returns an AI Task which uses an item based on the target.
--@param #ItemSelector
--@return #AITask the task

---
--@function[parent=#AI] switchFor
--
--Returns an AI Task which switches the active pokemon for a target.
--@param self
--@param #PokemonSelector selector
--@return #AITask the task

---
--@function[parent=#AITask] __lt
--
--Joins two AITasks by priority.
--If both are target selector tasks, then the result is a target selector task. 
-- The first is checked and the result is used unless the result is nil, in which case the next is checked. This can chain indefinately.
--If one is a target selector task, and the other is not a target selector task, then the first must be the target selector task or the implementation MUST raise an error and cease execution.
--Once a target selector is resolved, the other task is resolved in order until one does not return nil.
--If no target selector can be resolved, then it chooses a random target from Battle:select(bit32.bxor(Constants.Select.ADJANCENT,Constants.Select.OPPONENT)).
--If no task resolves an action, then a random move is chosen to be used instead.
--If the last task resolves a filter list, then a random entry in that filter is chosen. 
--@param #AITask self
--@param #AITask other
--@return #AITask an AITask which chooses

---
--@field[parent=#AI] #AITask RandomMove
--
--An AI Task which resolves a random move.

---
--@field[parent=#AI] #AITask SuperEffectiveMove
--
--An AI Task which resolves a combat move which is super effective against the target.
--Ties pass to next task

---
--@field[parent=#AI] #AITask HighestPower

---
--@field[parent=#AI] #AITask AttackLowestHealth
--
--An AI Task which selects the target from Battle:select(bit32.bxor(Constants.Select.ADJANCENT,Constants.Select.OPPONENT)) sorted in ascending order by HP.
--If there a multiple pokemon with the lowest HP then it is unspecified which one is chosen

---
--@field[parent=#AI] #AITask AttackHighestHealth
--
--An AI Task which selects the target from Battle:select(bit32.bxor(Constants.Select.ADJANCENT,Constants.Select.OPPONENT)) sorted in descending order by HP.
--If there a multiple pokemon with the highest HP then it is unspecified which one is chosen.

---
--@field[parent=#AI] #AITask RunFromBattle
--An AI Task which causes the Pokemon to run from battle.
--This can only be a task for Static Battles started using Game:startStaticBattle.


return nil
